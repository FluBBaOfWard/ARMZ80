ARMZ80 To do
------------

	Optimize EI, check IRQ pin before doing single opcode.
	Verify/Fix IRQ mode 0. Read how it works. Make test?
	Make core completly objectified.
	 * Copy whole opcode- plus flags-table?
	 * In/Out needs a pointer to table?
	Optimize NMI/IRQ check more?
	Emulate X & Y flags more correctly.

------------------------------------------------------------------------------
If what I've got is correct it wasn't in fact the MEMPTR but the flags on the non indirect BIT instruction.

My implementation followed the comments inside of the Undocumentd Z80 PDF which states:

SF flag Set if n = 7 and tested bit is set.
ZF flag Set if the tested bit is reset.
YF flag Set if n = 5 and tested bit is set.
HF flag Always set.
XF flag Set if n = 3 and tested bit is set.
PF flag Set just like ZF flag.
NF flag Always reset.
CF flag Unchanged.

Which I was doing, and failing.
If I change my BIT instruction to take Bit 5/Bit 3 (YF/XF) from the value being tested,
ignoring the bit being tested, it passes.
------------------------------------------------------------------------------

;@----------------------------------------------------------------------------
_27:	;@ DAA				Decimal Adjust Accumulator
;@----------------------------------------------------------------------------
	mov r0,#0x60000000

	adds r1,r0,z80a,lsl#4		;@ Check low nybble,
	tstcc z80f,z80f,lsr#5		;@ PSR_H to carry.
	orrcs r0,r0,#0x06

	cmn z80a,#0x66000000
	tstcc z80f,z80f,lsr#2		;@ PSR_C to carry.
	orrcs r0,r0,#0x60

	ands z80f,z80f,#PSR_n		;@ Check if last instruction was add or sub.
	orrcs z80f,z80f,#PSR_C		;@ The ands doesn't change carry as long as it doesn't have to shift the immediate value.

	rsbne r0,r0,#0
	mov r1,z80a,lsl#3
	add z80a,z80a,r0,lsl#24
	eors r1,r1,z80a,lsl#3
	orrmi z80f,z80f,#PSR_H
	getPzsTbl r2
	ldrb r2,[r2,z80a,lsr#24]	;@ Get PZS
	orr z80f,z80f,r2
	fetch 4
;@-----------------------------
	0x0 + 0x6 = 0x06
	0x1 + 0x6 = 0x07
	0x2 + 0x6 = 0x08
	0x3 + 0x6 = 0x09
	0x4 + 0x6 = 0x0A
	0x5 + 0x6 = 0x0B
	0x6 + 0x6 = 0x0C
	0x7 + 0x6 = 0x0D
	0x8 + 0x6 = 0x0E
	0x9 + 0x6 = 0x0F
	0xA + 0x6 = 0x10
	0xB + 0x6 = 0x11
	0xC + 0x6 = 0x12
	0xD + 0x6 = 0x13
	0xE + 0x6 = 0x14
	0xF + 0x6 = 0x15

	0x0 - 0x6 = 0x1A
	0x1 - 0x6 = 0x1B
	0x2 - 0x6 = 0x1C
	0x3 - 0x6 = 0x1D
	0x4 - 0x6 = 0x1E
	0x5 - 0x6 = 0x1F
	0x6 - 0x6 = 0x00
	0x7 - 0x6 = 0x01
	0x8 - 0x6 = 0x02
	0x9 - 0x6 = 0x03
	0xA - 0x6 = 0x04
	0xB - 0x6 = 0x05
	0xC - 0x6 = 0x06
	0xD - 0x6 = 0x07
	0xE - 0x6 = 0x08
	0xF - 0x6 = 0x09

	0x0 + 0xA = 0x0A
	0x1 + 0xA = 0x0B
	0x2 + 0xA = 0x0C
	0x3 + 0xA = 0x0D
	0x4 + 0xA = 0x0E
	0x5 + 0xA = 0x0F
	0x6 + 0xA = 0x10
	0x7 + 0xA = 0x11
	0x8 + 0xA = 0x12
	0x9 + 0xA = 0x13
	0xA + 0xA = 0x14
	0xB + 0xA = 0x15
	0xC + 0xA = 0x16
	0xD + 0xA = 0x17
	0xE + 0xA = 0x18
	0xF + 0xA = 0x19
